@page "{id:int}"
@model Quizziz.Pages.Quizzes.TakeModel
@{
	ViewData["Title"] = "Take Quiz";
}
<div class="container py-4">
    @if (Model.QuizAttempt == null)
    {
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">@Model.Quiz.Title</h4>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(Model.Quiz.Description))
                {
                    <p class="lead">@Model.Quiz.Description</p>
                }

                <dl class="row">
                    <dt class="col-sm-3">Number of Questions</dt>
                    <dd class="col-sm-9">@Model.Quiz.QuizQuestions.Count</dd>

                    @if (Model.Quiz.TimeLimit.HasValue)
                    {
                        <dt class="col-sm-3">Time Limit</dt>
                        <dd class="col-sm-9">@Model.Quiz.TimeLimit minutes</dd>
                    }
                </dl>

                <form method="post">
                    <input type="hidden" asp-for="Quiz.Id" />
                    <button type="submit" class="btn btn-primary">Start Quiz</button>
                    <a asp-page="./Index" class="btn btn-secondary">Cancel</a>
                </form>
            </div>
        </div>
    }
    else if (!Model.QuizAttempt.IsCompleted)
    {
        <div class="card">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h4 class="mb-0">@Model.QuizAttempt.QuizTitle</h4>
                @if (Model.QuizAttempt.HasTimeLimit)
                {
                    <div class="quiz-timer" id="timer"></div>
                }
            </div>
            <div class="card-body">
                <div class="progress quiz-progress">
                    <div class="progress-bar" role="progressbar"
                         style="width: @(((Model.QuizAttempt.CurrentQuestionIndex + 1) * 100) / Model.QuizAttempt.Questions.Count)%"
                         aria-valuenow="@(Model.QuizAttempt.CurrentQuestionIndex + 1)"
                         aria-valuemin="0"
                         aria-valuemax="@Model.QuizAttempt.Questions.Count"></div>
                </div>

                <p class="text-muted">Question @(Model.QuizAttempt.CurrentQuestionIndex + 1) of @Model.QuizAttempt.Questions.Count</p>

                @if (Model.QuizAttempt.CurrentQuestionIndex < Model.QuizAttempt.Questions.Count)
                {
                    var currentQuestion = Model.QuizAttempt.Questions[Model.QuizAttempt.CurrentQuestionIndex];

                    <div class="question-card">
                        <div class="question-header">
                            <h5>@currentQuestion.QuestionText</h5>
                        </div>
                        <div class="question-body">
                            <form method="post" asp-page-handler="Answer">
                                <input type="hidden" name="QuestionId" value="@currentQuestion.QuestionId" />

                                @foreach (var answer in currentQuestion.Answers)
                                {
                                    <div class="answer-option @(answer.IsSelected ? "selected" : "")">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="AnswerId" value="@answer.AnswerId" id="answer-@answer.AnswerId"
                                            @(answer.IsSelected ? "checked" : "") required />
                                            <label class="form-check-label" for="answer-@answer.AnswerId">
                                                @answer.AnswerText
                                            </label>
                                        </div>
                                    </div>
                                }

                                <div class="d-flex justify-content-between mt-4">
                                    <button type="submit" class="btn btn-primary">
                                        @(Model.QuizAttempt.CurrentQuestionIndex == Model.QuizAttempt.Questions.Count - 1 ? "Finish Quiz" : "Next Question")
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="quiz-results text-center">
            <h2>Quiz Completed!</h2>
            <h3>@Model.QuizAttempt.QuizTitle</h3>

            <div class="score-circle">
                <div class="score-display">@Model.QuizAttempt.Score%</div>
            </div>

            <p class="lead mt-3">
                You scored @Model.QuizAttempt.Score%
                (@Model.QuizAttempt.Questions.Count(q => q.IsCorrect) correct out of @Model.QuizAttempt.Questions.Count)
            </p>

            @if (Model.QuizAttempt.Duration.HasValue)
            {
                <p>Completed in @Model.QuizAttempt.Duration.Value.ToString(@"hh\:mm\:ss")</p>
            }

            <div class="mt-4">
                <a asp-page="./Review" asp-route-id="@Model.QuizAttempt.Id" class="btn btn-primary">Review Answers</a>
                <a asp-page="./Index" class="btn btn-secondary">Back to Quizzes</a>
            </div>
        </div>
    }
</div>

@section Scripts {
    @if (Model.QuizAttempt?.HasTimeLimit == true && !Model.QuizAttempt.IsCompleted)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Timer setup
                const endTime = new Date('@Model.QuizAttempt.EndTime?.ToString("o")');
                const timerElement = document.getElementById('timer');

                function updateTimer() {
                    const now = new Date();
                    const diff = endTime - now;

                    if (diff <= 0) {
                        // Time's up, submit the form
                        document.querySelector('form').submit();
                        return;
                    }

                    // Calculate minutes and seconds
                    const minutes = Math.floor(diff / 60000);
                    const seconds = Math.floor((diff % 60000) / 1000);

                    // Display the timer
                    timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

                    // Change color when time is running out
                    if (diff < 60000) { // Less than 1 minute
                        timerElement.classList.add('text-danger');
                    }
                }

                // Update the timer immediately and then every second
                updateTimer();
                setInterval(updateTimer, 1000);
            });
        </script>
    }
}
